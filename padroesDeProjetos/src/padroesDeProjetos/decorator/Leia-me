Decorator (Decorador): adiciona responsabilidades a objetos dinamicamente, envolvendo-os em objetos decoradores que possuem o mesmo contrato.

O padrão de projeto Decorator (Decorador) é um padrão estrutural que permite adicionar novos comportamentos a um objeto existente 
dinamicamente, envolvendo-o em um objeto decorador. Ele oferece uma alternativa flexível à herança para estender a funcionalidade de uma 
classe.

Vamos considerar uma classe Carro que representa um carro básico e queremos adicionar recursos opcionais a esse carro, como teto solar e 
ar-condicionado. O padrão Decorator nos permite adicionar esses recursos de forma dinâmica.

1º - vamos criar a interface Carro.

2º - vamos implementar a classe CarroBasico que implementa a interface Carro. A classe CarroBasico representa um carro básico sem nenhum 
     recurso adicional.
     
3º - vamos criar os decoradores que adicionam recursos ao carro básico. Primeiro, vamos criar o decorador TetoSolar. O decorador TetoSolar 
     recebe uma instância da interface Carro no construtor e implementa o método montar(), onde primeiro chama o método montar() da 
     instância de Carro e em seguida adiciona o teto solar.
     
4º - vamos criar o decorador ArCondicionado. O decorador ArCondicionado também recebe uma instância de Carro no construtor e implementa o 
     método montar(), onde primeiro chama o método montar() da instância de Carro e em seguida adiciona o ar-condicionado.
     
5º - podemos utilizar os decoradores para adicionar recursos opcionais ao carro básico.

Criamos um carro básico e utilizamos os decoradores TetoSolar e ArCondicionado para adicionar esses recursos ao carro. Também mostramos 
como é possível combinar vários decoradores para adicionar múltiplos recursos ao mesmo tempo.

O padrão Decorator permite adicionar funcionalidades adicionais a um objeto de forma dinâmica, sem modificar a estrutura básica do objeto 
original. Isso proporciona uma maior flexibilidade e extensibilidade ao código.
