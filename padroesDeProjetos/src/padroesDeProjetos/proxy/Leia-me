Proxy (Proxy): fornece um substituto ou marcador de posição para controlar o acesso a um objeto subjacente.

O padrão de projeto Proxy é um padrão estrutural que fornece um substituto ou representante de outro objeto para controlar o acesso a ele. 

O Proxy atua como uma camada intermediária entre o cliente e o objeto real, permitindo adicionar funcionalidades adicionais ou controlar o 
acesso ao objeto real.
Vamos considerar um cenário em que temos uma interface Imagem e uma implementação concreta ImagemReal que representa uma imagem pesada que 
leva tempo para ser carregada. Queremos usar um Proxy para exibir uma mensagem de carregamento enquanto a imagem real está sendo carregada.

1º - vamos definir a interface Imagem.

2º - vamos implementar a classe ImagemReal que representa a imagem real. A classe ImagemReal representa a imagem real que leva tempo para 
ser carregada. O método carregarImagem() simula o processo de carregamento da imagem pesada. O método exibir() exibe a imagem carregada.


3º - vamos implementar o Proxy ProxyImagem. A classe ProxyImagem atua como o Proxy para a ImagemReal. Quando o método exibir() é chamado 
no Proxy, ele verifica se a imagem real já foi carregada. Se não, cria uma instância de ImagemReal e chama o método exibir() nele.

4º - Agora, podemos utilizar o Proxy para exibir uma imagem. Criamos uma instância do Proxy ProxyImagem passando o nome do arquivo da imagem. 
Ao chamar o método exibir(), o Proxy verifica se a imagem real já foi carregada. Se não, carrega a imagem e a exibe.

O padrão Proxy permite controlar o acesso a um objeto real adicionando funcionalidades adicionais, como carregamento preguiçoso, cache, 
validação de acesso, entre outros. Ele também pode ser usado para fornecer um ponto de entrada adicional para o objeto real, permitindo a 
implementação de lógicas específicas antes ou depois de chamar os métodos do objeto real.
