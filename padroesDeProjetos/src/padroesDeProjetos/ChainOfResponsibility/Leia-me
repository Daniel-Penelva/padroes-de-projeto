Chain of Responsibility (Corrente de Responsabilidade): permite que um conjunto de objetos possa tratar uma solicitação de forma 
sequencial, passando-a ao longo da corrente até que seja processada.

O padrão de projeto Chain of Responsibility (Corrente de Responsabilidade) é um padrão comportamental que permite que múltiplos objetos 
possam tratar uma solicitação de forma sequencial. Cada objeto na corrente tem a opção de lidar com a solicitação ou passá-la para o 
próximo objeto na corrente.

Vamos considerar um cenário em que temos um sistema de aprovação de despesas, composto por vários níveis de aprovação (por exemplo, 
funcionário, gerente, diretor). Cada nível de aprovação tem um limite máximo de aprovação. Se a despesa estiver abaixo do limite, o nível 
correspondente aprova; caso contrário, a solicitação é passada para o próximo nível de aprovação.

1º - Vamos definir a interface Aprovador que representa cada nível de aprovação. A interface Aprovador define dois métodos: 
     setProximoAprovador() para definir o próximo aprovador na corrente e aprovar() para processar a aprovação da despesa.
     
2º - Vamos criar a classe Despesa que representa uma despesa a ser aprovada.

3º - Agora, vamos implementar as classes concretas que representam cada nível de aprovação. Vamos começar com a classe FuncionarioAprovador.
     A classe FuncionarioAprovador implementa a interface Aprovador. Ela possui um limite máximo de aprovação e mantém uma referência para 
     o próximo aprovador na corrente. No método aprovar(), o aprovador verifica se a despesa está abaixo do limite. Se estiver, ele aprova; 
     caso contrário, passa a solicitação para o próximo aprovador na corrente.

 4º - Agora, vamos implementar as classes GerenteAprovador e DiretorAprovador da mesma forma.
 
 5º - Por fim, vamos utilizar os aprovadores para processar uma despesa.
 
Neste exemplo, criamos instâncias dos aprovadores FuncionarioAprovador, GerenteAprovador e DiretorAprovador com seus respectivos limites 
de aprovação. Em seguida, definimos a corrente chamando o método setProximoAprovador() para conectar os aprovadores na ordem correta.

Depois, criamos três despesas com diferentes valores e chamamos o método aprovar() no primeiro aprovador da corrente. A corrente irá 
percorrer cada aprovador, passando a despesa para o próximo aprovador até que seja aprovada ou até que não haja mais aprovadores na 
corrente.

O padrão Chain of Responsibility permite criar uma corrente de objetos que podem tratar solicitações de forma sequencial, evitando a 
necessidade de acoplar explicitamente o remetente da solicitação ao receptor. Isso proporciona flexibilidade e extensibilidade ao sistema.
