Iterator (Iterador) fornece uma maneira de acessar sequencialmente os elementos de um objeto agregado sem expor sua representação interna.

O padrão Iterator é um padrão de projeto comportamental que fornece uma maneira de acessar os elementos de um objeto agregado 
sequencialmente sem expor sua representação interna. Ele define uma interface que permite percorrer os elementos de uma coleção de forma 
uniforme, independentemente da implementação específica da coleção.

Portanto, o padrão de projeto Iterator é um dos padrões de projeto comportamentais mais utilizados. Ele é projetado para fornecer uma 
maneira eficiente de acessar sequencialmente os elementos de uma coleção de objetos sem expor sua representação subjacente. O padrão 
Iterator é útil quando você tem uma coleção de objetos e deseja percorrer esses objetos sem expor os detalhes da implementação da coleção.

Para exemplificar considere uma classe Agenda que armazena uma lista de contatos. Queremos percorrer os contatos da agenda sem conhecer os 
detalhes internos da implementação da lista de contatos.

1º - Começar definindo a classe Contato. 
  . Esta classe representa um contato na agenda.
  . Possui atributos para armazenar o nome e o número de telefone do contato.
  . Fornece métodos para acessar esses atributos (getName() e getPhoneNumber()).

2º - Criar uma interface Iterator.
  . Interface que define o comportamento de um iterador genérico.
  . Contém métodos hasNext() para verificar se há mais elementos e next() para obter o próximo elemento da coleção.
  
3º - Criar uma interface Aggregate.
  . Interface que define o comportamento de uma coleção genérica.
  . Fornece um método createIterator() para criar um iterador para percorrer a coleção.
  
4º - Criar uma classe AgendaIterator
  . Implementação concreta do iterador para a classe Agenda.
  . Mantém uma referência à lista de contatos da agenda e um índice para rastrear a posição atual durante a iteração.
  . Implementa os métodos hasNext() e next() para percorrer os contatos na lista.
  
5º - Criando uma classe Agenda:
  . Implementação concreta da coleção de contatos.
  . Armazena uma lista de contatos usando a classe ArrayList.
  . Fornece um método addContact() para adicionar contatos à agenda.
  . Implementa o método createIterator() para criar um iterador específico da agenda.
  
  
6º - Criando a Classe main IteratorPatternExample:
  . Classe principal que contém o método main() para demonstrar o uso do padrão Iterator.
  . Cria uma instância da Agenda.
  . Adiciona alguns contatos à agenda.
  . Cria um iterador para percorrer os contatos na agenda.
  . Percorre e imprime os contatos da agenda usando o iterador.
 

O padrão Iterator permite percorrer os elementos de uma coleção de forma uniforme, independentemente da implementação específica da coleção. 
Ele desacopla o código que itera sobre a coleção do código que implementa a coleção, permitindo que ambos evoluam independentemente.
